openapi: 3.0.0
info:
  title: WasaPhoto
  description: |
    API for the project the course of WASA
  version: 0.0.2
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userid'

  /home:
    get:
      tags: ["user", "mystream"]
      summary: ask for the stream of the user, specified by userid which is inferred by auth token 
      operationId: getMyStream 
      responses:
        '200':
          description: return the photos of all the following in reverse chronological order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/photoid'        
        "401":
          description: you're not authorized to view the stream
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'                

  /users/{userid}:
    parameters:
      - $ref: '#/components/parameters/userid'
    put:
      tags: ['user', 'profile']
      summary: creates or updates user details
      description: allows to modify username, and other details
      operationId: setMyUserName
      requestBody:
        description: the new identificative
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/userid'
      responses:
        '200':
          description: update successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userid'

        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
        '401': 
          description: unauthorized to change user name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
        '409':
          description:  user already exists, choose another name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
    get:
      tags: ['user', 'profile']
      summary: ask for the profile of the user, specified by userid
      operationId: getProfileUser 
      responses:
        '200':
          description: return the photos of the user in reverse chronological order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/photoid'        
        "401":
          description: you're not authorized to view the profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
        "404":
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  

    
  /users/{userid}/photos:
    parameters:
      - $ref: '#/components/parameters/userid'
    post:
      tags: ["photo", 'user']
      summary: uploads a picture for the user
      operationId: uploadPhoto
      requestBody:
        description: the photo to be uploaded
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/photo'
        required: true
      responses:
        '201':
          description: succesfull operation, returns the id of the new photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photoid'
        "401":
          description: you're not authorized to add the photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
          
  /users/{userid}/photos/{photoid}:
    parameters:
      - $ref: '#/components/parameters/userid'
      - $ref: '#/components/parameters/photoid'
    delete:
      tags: ['photo', 'user']
      summary: deletes the photo
      operationId: deletePhoto
      responses:
        "204":
          description: photo deleted or photo already didn't exist
        "401":
          description: you're not authorized to delete the photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
    
  /users/{userid}/photos/{photoid}/comments:
      parameters:
        - $ref: '#/components/parameters/userid'
        - $ref: '#/components/parameters/photoid'
      post:
        tags: ['user', "photo", 'comment']
        summary: uploads a comment on the picture
        operationId: commentPhoto
        requestBody:
          description: the photo to be uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          required: true
        responses:
          '201':
            description: succesfull operation, returns id of the comment
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/commentid'
          "401":
            description: you're not authorized to post the comment
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'  


  /users/{userid}/photos/{photoid}/comments/{commentid}:
      parameters:
        - $ref: '#/components/parameters/userid'
        - $ref: '#/components/parameters/photoid'
        - $ref: '#/components/parameters/commentid'
      delete:
        tags: ['user', "photo", 'comment']
        summary: deletes the comment
        operationId: uncommentPhoto
        responses:
          "204":
            description: comment deleted or comment didn't exist
          "401":
            description: you're not authorized to remove the comment
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'


  /users/{userid}/photos/{photoid}/likes:
    parameters:
      - $ref: '#/components/parameters/userid'
      - $ref: '#/components/parameters/photoid'
    post:
      tags: ['user', "photo", 'like']

      summary: likes the picture, returns '200' if the picture is already liked
      description: the logged user likes the picture, returns '200' if the picture is already liked
      operationId: likePhoto
      responses:
        '201':
          description: like created returns id of the like
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/likeid'
        '200':
          description: like already exists, returns id of the like
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/likeid'
        "401":
          description: you're not authorized to add the like
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'

  /users/{userid}/photos/{photoid}/likes/{likeid}:
    parameters:
      - $ref: '#/components/parameters/userid'
      - $ref: '#/components/parameters/photoid'
      - $ref: '#/components/parameters/likeid'
    delete:
      tags: ['user', 'photo', 'like']
      summary: unlikes the photo
      description: remove the like of user in request body from the photo of the user in path
      operationId: unlikePhoto
      responses:
        "204":
          description: like deleted (or the like is not present)
        "401":
          description: you're not authorized to remove the like
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'

          
  /users/{userid}/followers/:
    parameters:
      - $ref: '#/components/parameters/userid'
    post:
      tags: ['user', 'follow']
      summary: add a user (requestbody) to the follower list of the user (path)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid2'
        required: true
      responses:
        "201":
          description: user added to followers
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userid2'
        '200':
          description: user already in the followers list
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userid2'
        "404":
          description: user not found
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to add the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'

  
  /users/{userid}/following/:
    parameters:
      - $ref: '#/components/parameters/userid' 
    post:
      tags: ['user', 'follow']
      summary: add a user (requestbody) to the following list of the user (path)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid2'
        required: true
      responses:
        '201':
          description: user added to followings succesfully
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userid2'
        '200':
          description: user already in the following list
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userid2'
        '404':
          description: user not found
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to add the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
  
  /users/{userid}/followers/{userid2}:
    parameters:
      - $ref: '#/components/parameters/userid'
      - $ref: '#/components/parameters/userid2'
    delete:
      tags: ['user', 'follow']
      summary: deletes the user (requestbody) from the following list of user (path)
      operationId: removeFollower
      responses:
        "204":
          description: user removed from follower list (or user not in the followers list)
        "401":
          description: you're not authorized to remove the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
    
  /users/{userid}/following/{userid2}:
    parameters:
      - $ref: '#/components/parameters/userid'
      - $ref: '#/components/parameters/userid2'
    delete:
      tags: ['user', 'follow']
      summary: removes a user (requestbody) from the following list of the user (path)
      responses:
        '204':
          description: user removed from followings succesfully (or it wasn't there)
        '404':
          description: user not found
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to remove the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'


  
  /users/{userid}/banned/:
    parameters:
      - $ref: '#/components/parameters/userid' 
    post:
      tags: ['ban', 'user']
      summary: add a user (requestbody) to the banned list of the user (path)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid2'
        required: true
      responses:
        '200':
          description: user banned succesfully (or already in banned list[idempotend request])
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/userid2'
        '404':
          description: user not found
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to ban the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'

  /users/{userid}/banned/{userid2}:
    parameters:
      - $ref: '#/components/parameters/userid' 
      - $ref: '#/components/parameters/userid2' 
    delete:
      tags: ['ban', 'user']
      operationId: unbanUser
      summary: removes a user (userid2) from the banned list of the user (path)
      responses:
        '204':
          description: user unbanned succesfully
        '404':
          description: user not found or non

          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to remove the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'


components:
  parameters:
    
    commentid: 
      name: commentid
      in: path
      description: The comment id
      required: true
      schema:
        $ref: '#/components/schemas/commentid'
    
    userid: 
      name: userid
      in: path
      description: The username of the user
      required: true
      schema:
        $ref: '#/components/schemas/userid'

    userid2:
      name: userid2
      in: path
      description: The username username of the user, the logged user is interacting with
      required: true
      schema:
        $ref: '#/components/schemas/userid'
        
    photoid:
      name: photoid
      in: path
      description: identificative of the photo
      required: true
      schema:
        $ref: '#/components/schemas/photoid'
        
    likeid:
      name: likeid
      in: path
      description: identificative of the like (the username of the person who put like)
      required: true
      schema:
        $ref: '#/components/schemas/userid'
        
        
  schemas:
  
    photoid:
      type: string
      example: fneornf123
      minLength: 3
      maxLength: 16
    
    commentid:
      type: string
      example: fneornf123
      minLength: 3
      maxLength: 16
      
    userid:  
      type: string
      example: Maria
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

    userid2:
      $ref: '#/components/schemas/userid'

    
    likeid:
      description: photoid+userid concatenation
      type: string
      example: Mariafneornf123
      minLength: 6
      maxLength: 32

    like:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/userid'
        photoId:
          $ref: '#/components/schemas/photoid'
        likeid:
          $ref: '#/components/schemas/likeid'
    
    comment:
      type: object
      example: "Che bella foto!!!"
      properties:
        user:
          $ref: '#/components/schemas/userid'
        content:
          type: string
        date:
          type: string
          format: date-time
          
    photo:
      type: object
      properties:
        photoid:
          $ref: '#/components/schemas/photoid'
        image:
          type: string
          format: binary
        user:
          $ref: '#/components/schemas/userid'
        likes: 
          type: array
          items:
            $ref: '#/components/schemas/like'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/comment'
        date:
          type: string
          format: date-time
        likecount:
          type: integer
          default: 0
      required:
        - photoid
        - image
        - user
        - date
        - likecount
    
    error:
      type: object 
      properties:
        error:
          type: string
        message:
          type: string
