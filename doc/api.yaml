openapi: 3.0.0
info:
  title: WasaPhoto
  description: |
    API for the project the course of WASA
  version: 0.0.1
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userid'

  /users/{userid}/mystream/:
    get:
      tags: ["user", "mystream"]
      summary: ask for the stream of the user, specified by userid
      operationId: getMyStream 
      responses:
        '200':
          description: return the photos of all the following in reverse chronological order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/photoid'        
        "401":
          description: you're not authorized to view the stream
                

  /users/{userid}:
    parameters:
      - $ref: '#/components/parameters/userid'
    put:
      tags: ['user', 'profile']
      summary: creates or updates user details
      description: allows to modify username, and other details
      operationId: setMyUserName
      requestBody:
        description: the new identificative
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/userid'
      responses:
        '200':
          description: update successfull
        '204':
          description: for not updating, rewrite the same username
        '400':
          description: bad request
        '401': 
          description: unauthorized to change user name
        '409':
          description:  user already exists, choose another name
    get:
      tags: ['user', 'profile']
      summary: ask for the profile of the user, specified by userid
      operationId: getProfileUser 
      responses:
        '200':
          description: return the photos of the user in reverse chronological order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/photoid'        
        "401":
          description: you're not authorized to view the profile
        "404":
          description: user not found
    
  /users/{userid}/photos:
    parameters:
      - $ref: '#/components/parameters/userid'
    post:
      tags: ["photo", 'user']
      summary: uploads a picture for the user
      operationId: uploadPhoto
      requestBody:
        description: the photo to be uploaded
        content:
          multipath/form:
            schema:
              $ref: '#/components/schemas/photo'
        required: true
      responses:
        '200':
          description: succesfull operation, returns the id of the new photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/photoid'
        "401":
          description: you're not authorized to add the photo

    delete:
      tags: ['photo', 'user']
      summary: deletes the photo
      operationId: deletePhoto
      requestBody:
        description: the unique identificative of the photo to be deleted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/photoid'
      responses:
        "200":
          description: succesfull operation
        "401":
          description: you're not authorized to delete the photo
        "404":
          description: the photo does not exists

    
  /users/{userid}/photos/{photoid}/comments:
      parameters:
        - $ref: '#/components/parameters/userid'
        - $ref: '#/components/parameters/photoid'
      post:
        tags: ['user', "photo", 'comment']
        summary: uploads a comment on the picture
        operationId: commentPhoto
        requestBody:
          description: the photo to be uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
          required: true
        responses:
          '200':
            description: succesfull operation, returns id of the comment
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/commentid'
          "401":
            description: you're not authorized to post the comment

      delete:
        tags: ['user', "photo", 'comment']
        summary: deletes the comment
        operationId: uncommentPhoto
        requestBody:
          description: the id of the comment to be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentid'
          required: true
        responses:
          "200":
            description: succesfull operation
          "404":
            description: comment not found
          "401":
            description: you're not authorized to remove the comment


  /users/{userid}/photos/{photoid}/likes:
    parameters:
      - $ref: '#/components/parameters/userid'
      - $ref: '#/components/parameters/photoid'
    post:
      tags: ['user', "photo", 'like']
      summary: likes the picture, returns '200' if the picture is already liked
      operationId: likePhoto
      responses:
        '201':
          description: succesfull operation, returns id of the like
        '200':
          description: like already exists (idempotent request)
        "401":
          description: you're not authorized to add the like

    delete:
      tags: ['user', 'photo', 'like']
      summary: unlikes the photo
      operationId: unlikePhoto
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
      responses:
        "200":
          description: succesfull operation
        "204":
          description: the like is not present
        "404":
          description: user not found
        "401":
          description: you're not authorized to remove the like

          
  /users/{userid}/followers/:
    parameters:
      - $ref: '#/components/parameters/userid'
    delete:
      tags: ['user', 'follow']
      summary: deletes the user from the following list
      operationId: removeFollower
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        "200":
          description: succesfull operation
        "204":
          description: the user is not present in the followers
        "404":
          description: user not found
        "401":
          description: you're not authorized to remove the user

    post:
      tags: ['user', 'follow']
      summary: add a user to the follower list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        "201":
          description: succesfull operation
        '200':
          description: user already in the followed list
        "404":
          description: user not found
        "401":
          description: you're not authorized to add the user

  
  /users/{userid}/following/:
    parameters:
      - $ref: '#/components/parameters/userid' 
    post:
      tags: ['user', 'follow']
      summary: add a user to the following list, returns '200' if the user is alrady followed
      operationId: followUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        '201':
          description: user added to followings succesfully
        '200':
          description: user already in the following list
        '404':
          description: user not found
        "401":
          description: you're not authorized to add the user
    delete:
      tags: ['user', 'follow']
      summary: deletes the user from the followers likst
      operationId: unfollowUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        '201':
          description: user removed from followings succesfully
        '200':
          description: user not in the following list
        '404':
          description: user not found
        "401":
          description: you're not authorized to remove the user


  
  /users/{userid}/banned/:
    parameters:
      - $ref: '#/components/parameters/userid' 
    post:
      tags: ['ban', 'user']
      summary: add a user to the banned list, returns '200' if the user is alrady banned
      operationId: banUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        '201':
          description: user banned succesfully
        '200':
          description: user already in the banned list
        '404':
          description: user not found
        "401":
          description: you're not authorized to ban the user
    delete:
      tags: ['ban', 'user']
      summary: unbans the user
      operationId: unbanUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userid'
        required: true
      responses:
        '201':
          description: user unbanned succesfully
        '200':
          description: user not in the banned list
        '404':
          description: user not found
        "401":
          description: you're not authorized to remove the user


components:
  parameters:
    
    commentid: 
      name: commentid
      in: path
      description: The comment id
      required: true
      schema:
        $ref: '#/components/schemas/commentid'
    
    userid: 
      name: userid
      in: path
      description: The username of the user
      required: true
      schema:
        $ref: '#/components/schemas/userid'
        
    photoid:
      name: photoid
      in: path
      description: identificative of the photo
      required: true
      schema:
        $ref: '#/components/schemas/photoid'
        
    likeid:
      name: likeid
      in: path
      description: identificative of the like (the username of the person who put like)
      required: true
      schema:
        $ref: '#/components/schemas/userid'
        
        
  schemas:
  
    photoid:
      type: string
      example: fneornf123
      minLength: 3
      maxLength: 16
    
    commentid:
      type: string
      example: fneornf123
      minLength: 3
      maxLength: 16
      
    userid:  
      type: string
      example: Maria
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

    like:
      type: object
      properties:
        user:
          description: the user who puts like (it is the same of likeid)
          $ref: '#/components/schemas/userid'
        photoId:
          description: the photo the like is related to
          $ref: '#/components/schemas/photoid'
    
    comment:
      type: object
      example: "Che bella foto!!!"
      properties:
        user:
          description: the use who puts the comment
          $ref: '#/components/schemas/userid'
        content:
          type: string
        date:
          type: string
          format: date-time
          
    photo:
      type: object
      properties:
        photoid:
          $ref: '#/components/schemas/photoid'
        image:
          type: string
          format: binary
        user:
          $ref: '#/components/schemas/userid'
        likes: 
          type: array
          items:
            $ref: '#/components/schemas/like'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/comment'
        date:
          type: string
          format: date-time
        likecount:
          type: integer
          default: 0
      required:
        - photoid
        - image
        - user
        - date
        - likecount
