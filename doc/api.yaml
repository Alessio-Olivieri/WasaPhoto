openapi: 3.0.0
info:
  title: WasaPhoto
  description: |
    API for the project the course of WASA
  version: 3.0.0
servers:
  - url: "http://localhost:3000"
    description: localhost server, for development purposses.

tags: 
  - name: login
  - name: settings
  - name: Stream
  - name: profile
  - name: user
  - name: photo
  - name: Comment
  - name: like
  - name: follow
  - name: ban
  
paths:
  /login:
    parameters:
      - $ref: '#/components/parameters/username_query'
    post:
      tags: ["login"]
      operationId: doLogin
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      responses:
        '200':
            description: User log-in action successful, return the id of the user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Object_id'
        '201':
          description: User log-in action successful, user created, return the id of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object_id'
        '500':
          $ref: '#/components/responses/ServerError'
        '400':
          $ref: '#/components/responses/BadRequestError'

          
  /settings/username:
    put:
      security:
        - bearerAuth: []
      tags: ["settings"]
      operationId: setMyUserName
      summary: Sets the username of the authenticated user
      description: |-
        If the username is already taken, the user will be asked to choose another one.
      requestBody:
        description: The new username
        content:
          application/json:
            schema:
              description: the new username
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username'
        required: true
      responses:
        '204':
          description: Username changed successfully
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/AuthorizationError"
        '409':
          $ref: "#/components/responses/ConflictError"
        '500':
          $ref: "#/components/responses/ServerError"

  /stream:
    parameters:
      - name: page
        in: query
        description: the offset of posts of the Stream
        required: true
        schema:
          type: integer
          maximum: 999999999
          minimum: 0
    get:
      security:
        - bearerAuth: []
      tags: ["Stream"]
      operationId: getMyStream 
      summary: ask for the Stream of the user, specified by user_id which is inferred by auth token 
      description: |
        return the photos of all the users followed by the current user in reverse chronological order
      responses:
        '200':
          description: |
            return the posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'    
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{username}:  
    parameters:
      - $ref: '#/components/parameters/username_path' 
    get:
      security:
        - bearerAuth: []
      tags: ['profile']
      summary: request the profile of the user, specified by username
      description: |
        return the photos of the user in reverse chronological order
      operationId: getUserProfile 
      responses:
        '200':
          description: return the photos of the user in reverse chronological order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_profile'
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"

  /users/:
    parameters:
      - $ref: '#/components/parameters/username_query'
    get:
      security:
        - bearerAuth: []
      operationId: searchUser
      description: |-
        Get lists of possible users
        that have username similar 
        to the one in the query.
      summary: search user
      tags: ['user']
      responses:
        "200":
          description: Users found and returned.
          content:
            application/json:
              schema:
                description: 
                  List of the users found
                type: object
                properties:
                  users:
                    $ref: "#/components/schemas/Userlist"
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"


  /photos/:
    post:
      security:
        - bearerAuth: []
      tags: ["photo"]
      summary: uploads a Picture for the user
      description: |
        The user uploads a photo with a description
      operationId: uploadPhoto
      requestBody:
        description: the photo to be uploaded
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post_photo'
        required: true
      responses:
        '201':
          description: succesfull operation, returns the new post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /photos/{post_id}:
    parameters:
      - $ref: '#/components/parameters/post_id'
    delete:
      security:
        - bearerAuth: []
      tags: ['photo']
      operationId: deletePhoto
      summary: deletes the photo
      description: 
        deletes the photo specified by post_id
      responses:
        "204":
          description: photo deleted or photo already didn't exist
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/AuthorizationError'
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/ServerError'
                
    
  /photos/{post_id}/comments/:
    parameters:
      - $ref: '#/components/parameters/post_id'
    post:
      security:
        - bearerAuth: []
      tags: ['Comment']
      operationId: commentPhoto
      summary: uploads a Comment on the Picture
      description: |
        The user uploads a comment on the photo
      requestBody:
        content:
          application/json:
            schema:
              description: the comment
              type: object
              properties:
                content:
                  $ref: '#/components/schemas/Text'
        required: true
      responses:
        '201':
          description: succesfull operation, returns the Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: '#/components/responses/AuthorizationError'
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: '#/components/responses/ServerError'

  /photos/{post_id}/comments/{comment_id}:
    parameters:
      - $ref: '#/components/parameters/post_id'
      - $ref: '#/components/parameters/comment_id'
    delete:
      security:
        - bearerAuth: []
      tags: ['Comment']
      operationId: uncommentPhoto
      summary: deletes the 
      description: |
        The post_id is just a placeholder, 
        the comment_id is the only one that matters
      responses:
        "204":
          description: Comment deleted
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"

  /photos/{post_id}/likes/me:
    parameters:
      - $ref: '#/components/parameters/post_id'
    put:
      security:
        - bearerAuth: []
      tags: ['like']
      operationId: likePhoto
      summary: likes the Picture, returns '200' if the Picture is already liked
      description: the logged user likes the Picture, returns '200' if the Picture is already liked
      responses:
        '204':
          description: like created or already exists
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      security:
        - bearerAuth: []
      tags: ['like']
      operationId: unlikePhoto
      summary: unlikes the photo
      description: remove the like of user from the photo
      responses:
        '204':
          description: like removed
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"

          
  /followed/{username}:
    parameters:
      - $ref: '#/components/parameters/username_path'
    put:
      security:
        - bearerAuth: []
      tags: ['follow']
      operationId: followUser
      summary: add a follower
      description: |
        add a user to the followers list of the authenticated user
        return 200 if the user is already in the list
      responses:
        '204':
          description: user already in followings or user added to followings succesfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "500":
          $ref: "#/components/responses/ServerError"
  
    delete:
      security:
        - bearerAuth: []
      tags: ['follow']
      operationId: unfollowUser
      summary: removes a follower
      description: |
        remove a user from the followers list of the authenticated user
      responses:
        '204':
          description: user removed from followings 
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "403":
          $ref: '#/components/responses/ForbiddenError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"
  
  /banned/{username}:
    parameters:
      - $ref: '#/components/parameters/username_path' 
    put:
      security:
        - bearerAuth: []
      tags: ['ban']
      operationId: banUser
      summary: ban a user
      description: |
        add a user to the banned list of the authenticated user
      responses:
        '204':
          description: user banned or user already banned
        '400': 
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/AuthorizationError'
        '500': 
          $ref: "#/components/responses/ServerError"

    delete:
      security:
        - bearerAuth: []
      tags: ['ban']
      operationId: unbanUser
      summary: unban a user
      description: |
        remove a user to from the banned list of the authenticated user
      responses:
        '204':
          description: user unbanned succesfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: "#/components/responses/AuthorizationError"
        "404":
          $ref: '#/components/responses/NotFoundError'
        "500":
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    
    comment_id: 
      name: comment_id
      in: path
      description: The Comment id
      required: true
      schema:
        $ref: '#/components/schemas/Object_id'
        
    post_id:
      name: post_id
      in: path
      description: identificative of the photo
      required: true
      schema:
        $ref: '#/components/schemas/Object_id'

    username_path:
      name: username
      in: path
      description: the username of the user to interact with
      required: true
      schema:
        $ref: '#/components/schemas/Username'

    username_query:
      name: username
      in: query
      description: the username of the user
      required: true
      schema:
        $ref: '#/components/schemas/Username'
    
        
  responses:
    BadRequestError:
      description: request not compliant with REST API specifications.
      content:
        Text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    ConflictError:
      description: |
        the request could not be completed due to a conflict with the current state of the resource.
      content:
        Text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    ServerError:
      description: an unexpected condition was encountered while handling the request.
      content:
        Text/plain:
          schema: { $ref: "#/components/schemas/Error" }

    AuthorizationError:
      description: |
        An authenticated session is requested to access this endpoint,
        but no valid authentication was included in the request.
      content:
        Text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    ForbiddenError:
      description: |
        An authenticated session is needed to access this endpoint,
        and a valid authentication was included in the request,
        but the server is refusing action due to either a lack of the 
        necessary permissions for handling the requested resource or 
        because the user was attempting a prohibited action.
      content:
        Text/plain:
          schema: { $ref: "#/components/schemas/Error" }
    
    NotFoundError:
      description: |
        the resource was not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

        
  schemas:
    Userlist:
      description: a list of usernames
      type: array
      items:
        $ref: '#/components/schemas/Username'
      minItems: 0
      maxItems: 18446744073709551615
      uniqueItems: true

    User_profile:
      description: everything from the user
      type: object
      properties:
        followers:
          $ref: '#/components/schemas/Userlist'
        followers_count:
          $ref: '#/components/schemas/Numerical'
        is_banned:
          description: |
            True if the user of the profile is banned by the current user
          type: boolean
        is_following:
          description: |
            True if the user of the profile is followed by the current user
          type: boolean
        posts:
          description: |
            List of the posts of the user
          type: array
          items:
            $ref: '#/components/schemas/Post'
          minItems: 0
          maxItems: 10
        
    Comment:
      description: |
        the Comment of the user on a photo
      type: object
      properties:
        comment_id:
          $ref: '#/components/schemas/Object_id'
        post_id:
          $ref: '#/components/schemas/Object_id'
        username:
          $ref: '#/components/schemas/Username'
        user_id:
          $ref: '#/components/schemas/Object_id'
        content:
          $ref: '#/components/schemas/Text'
        Date:
          $ref: "#/components/schemas/Date" 
      
    Post_photo:
      description: 
        Schema for handling the photo upload of the logged in user
      type: object
      properties:
        picture:
          $ref: '#/components/schemas/Picture'
        caption:
          $ref: '#/components/schemas/Text'

    Stream:
      description: List of the photos of the users followed by the current user in descending order of Date
      type: object
      properties:
        posts:
          $ref: '#/components/schemas/Posts'
        number_of_pages:
          $ref: '#/components/schemas/Numerical'
        current_page:
          $ref: '#/components/schemas/Numerical'

    Posts:
      description: List of the posts
      type: array
      items:
        $ref: '#/components/schemas/Post' 
      minItems: 0
      maxItems: 10

    Post:
      description: |
        the post of the user
      type: object
      properties:
        post_id:
          $ref: "#/components/schemas/Object_id"
        content:
          $ref: "#/components/schemas/Text"
        username:
          $ref: "#/components/schemas/Username"
        user_id:
          $ref: "#/components/schemas/Object_id"
        likes_count:
          $ref: "#/components/schemas/Numerical"
        likes:
          $ref: "#/components/schemas/Userlist"
        is_liked:
          description: |
            True if the current user liked the post
          type: boolean
        comments:
          type: array
          description: List of comments on the post
          items:
            $ref: '#/components/schemas/Comment'  
          minItems: 0
          maxItems: 999999999
        Date:
          $ref: "#/components/schemas/Date"
        Picture:
          $ref: "#/components/schemas/Picture"

    Object_id:
      $ref: '#/components/schemas/Numerical'

    Username:
      description: |
        the username of the user
      type: string
      pattern: '^[a-zA-Z0-9._-]+$'
      minLength: 3
      maxLength: 25
    
    Date:
      description: |
        A general schema that represents a Date
      type: integer
      format: int64

    Text:
      description: |
        A general schema for a long Text
      type: string
      pattern: '^[a-zA-Z0-9.,;:#"!?=)(/(_-]+$'
      maxLength: 1000
      minLength: 1

    Numerical:
      description: |
        general integer
      type: integer
      example: 4902
      maximum: 18446744073709551615 # 2^64-1 
      minimum: 0

    Picture:
      description: Base64 encoded image data
      type: string
      format: byte
      pattern: "^[01]+$"
      minLength: 0
      maxLength: 9999999999999999999

    Error:
      description: |
        general Error, the particulars are in the properties
      type: string
      minLength: 0
      maxLength: 250
      readOnly: True
    
  securitySchemes:
    bearerAuth:
      description: |
        User authentication with the user ID passed
        as an authentication token.
        Of course, that is extremely insecure, but it's done
        according to the project specification.
      type: http
      scheme: bearer