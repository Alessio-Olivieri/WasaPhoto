openapi: 3.0.0
info:
  title: WasaPhoto
  description: |
    API for the project the course of WASA
  version: 0.0.2
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/object_id'
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_id'

  /stream:
    get:
      tags: ["stream"]
      summary: ask for the stream of the user, specified by user_id which is inferred by auth token 
      operationId: getMyStream 
      responses:
        '200':
          description: |
            return the photos of all the users followed by the current user in reverse chronological order
          content:
            application/json:
              schema:
                description: the photos of the user in reverse chronological order
                type: array
                items:
                  $ref: '#/components/schemas/object_id'        

  /users/{user_id}/edit:
    parameters:
      - $ref: '#/components/parameters/user_id'
    put:
      tags: ['user']
      summary: creates or updates user details
      description: |
        update the details of the user
      operationId: setMyUserName
      requestBody:
        description: |
          the new username of the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username'
        required: true
      responses:
        '200':
          description: update successfull
          content:
            application/json:
              schema:
                description: |
                  the id of the user
                $ref: '#/components/schemas/object_id'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
        '401': 
          description: unauthorized to change user name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
        '409':
          description:  username already taken, choose another name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /users/{user_id}:  
    parameters:
      - $ref: '#/components/parameters/user_id' 
    get:
      tags: ['profile']
      summary: request the profile of the user, specified by user_id
      operationId: getProfileUser 
      responses:
        '200':
          description: return the photos of the user in reverse chronological order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/object_id'        
        "401":
          description: you're not authorized to view the profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
        "404":
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  

    
  /photos/:
    post:
      tags: ["photo"]
      summary: uploads a picture for the user
      operationId: uploadPhoto
      requestBody:
        description: the photo to be uploaded
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/photo'
        required: true
      responses:
        '201':
          description: succesfull operation, returns the id of the new photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_id'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: you're not authorized to upload the photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /photos/{photo_id}:
    parameters:
      - $ref: '#/components/parameters/photo_id'
    delete:
      tags: ['photo']
      summary: deletes the photo
      operationId: deletePhoto
      responses:
        "204":
          description: photo deleted or photo already didn't exist
        "401":
          description: you're not authorized to delete the photo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
                
    
  /photos/{photo_id}/comments/:
    parameters:
      - $ref: '#/components/parameters/photo_id'
    post:
      tags: ['comment']
      summary: uploads a comment on the picture
      operationId: commentPhoto
      requestBody:
        description: the photo to be uploaded
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        required: true
      responses:
        '201':
          description: succesfull operation, returns id of the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_id'
        "401":
          description: you're not authorized to post the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
  /photos/{photo_id}/comments/{comment_id}:
    parameters:
      - $ref: '#/components/parameters/photo_id'
      - $ref: '#/components/parameters/comment_id'
    delete:
      tags: ['user', "photo", 'comment']
      summary: deletes the comment
      operationId: uncommentPhoto
      responses:
        "204":
          description: comment deleted or comment didn't exist
        "401":
          description: you're not authorized to remove the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'


  /photos/{photo_id}/likes/like:
    parameters:
      - $ref: '#/components/parameters/photo_id'
    put:
      tags: ['user', "photo", 'like']

      summary: likes the picture, returns '200' if the picture is already liked
      description: the logged user likes the picture, returns '200' if the picture is already liked
      operationId: likePhoto
      requestBody:
        description: |
          the user_id of the user putting like
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/object_id'
        required: true

      responses:
        '201':
          description: like created returns id of the like
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/object_id'
        '200':
          description: like already exists, returns id of the like
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/object_id'
        "401":
          description: you're not authorized to add the like
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
    delete:
      tags: ['like']
      summary: unlikes the photo
      description: remove the like of user in request body from the photo of the user in path
      operationId: unlikePhoto
      responses:
        "204":
          description: like deleted (or the like is not present)
        "401":
          description: you're not authorized to remove the like
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'

          
  /following/{user_id}/:
    parameters:
      - $ref: '#/components/parameters/user_id'
    put:
      tags: ['follow']
      summary: add a follower
      description: |
        add a user to the followers list of the authenticated user
      responses:
        "201":
          description: user added to followers
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/object_id'
        '200':
          description: user already in the followers list
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/object_id'
        "404":
          description: user not found
          content:
              application/json:                                                                                                                                                                                                                                                                                                                                                                                                                      
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to add the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
    delete:
      tags: ['follow']
      summary: removes a follower
      description: |
        remove a user from the followers list of the authenticated user
      responses:
        '204':
          description: user removed from followings succesfully (or it wasn't there)
        '404':
          description: user not found
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to remove the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
  
  /banned/{user_id}/:
    parameters:
      - $ref: '#/components/parameters/user_id' 
    put:
      tags: ['ban']
      summary: ban a user
      description: |
        add a user to the banned list of the authenticated user
      responses:
        '200':
          description: user banned succesfully (or already in banned list[idempotend request])
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/object_id'
        '404':
          description: user not found
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to ban the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
    delete:
      tags: ['ban']
      operationId: unbanUser
      summary: removes a user (userid2) from the banned list of the user (path)
      responses:
        '204':
          description: user unbanned succesfully
        '404':
          description: user not found or non

          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'
        "401":
          description: you're not authorized to remove the user
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/error'


components:
  parameters:
    
    comment_id: 
      name: comment_id
      in: path
      description: The comment id
      required: true
      schema:
        $ref: '#/components/schemas/object_id'
    
    user_id: 
      name: user_id
      in: path
      description: The username of the user
      required: true
      schema:
        $ref: '#/components/schemas/object_id'
        
    photo_id:
      name: photo_id
      in: path
      description: identificative of the photo
      required: true
      schema:
        $ref: '#/components/schemas/object_id'
        
    like_id:
      name: like_id
      in: path
      description: identificative of the like (the username of the person who put like)
      required: true
      schema:
        $ref: '#/components/schemas/object_id'
        
        
  schemas:
    object_id:
      description: |
        the unique identifier of the user, photo, like, comment
        it is a string of 24 characters
      type: integer
      example: 4902
      maximum: 18446744073709551615 # 2^64-1 
      minimum: 0

    username:
      description: |
        the username of the user
        it is a string of 10 characters
      type: string
      example: "pippo"
      pattern: '^[a-zA-Z0-9._-]+$'
      minLength: 3
      maxLength: 10

    user:
      description: |
        the details of the user, like username, email, date of birth, etc.
      type: object
      properties:
        user_id:
          description: the unique identifier of the user
          $ref: '#/components/schemas/object_id'
        username:
          description: the username of the user
          $ref: '#/components/schemas/username'
        date_of_birth:
          description: the date of birth of the user
          type: string
          format: date
        
    texts:
      description: |
        the content of comment or posts
        it is a long string
      type: string
      example: "Che bella foto!!!"
      maxLength: 1000
      minLength: 1
    
    comment:
      description: |
        the comment of the user on a photo
      type: object
      example: "Che bella foto!!!"
      properties:
        comment_id:
          description: the unique identifier of the comment
          $ref: '#/components/schemas/object_id'
        photo_id:
          description: the unique identifier of the photo to which the comment belongs
          $ref: '#/components/schemas/object_id'
        user_id:
          description: the unique identifier of the user that posted the comment
          $ref: '#/components/schemas/object_id'
        content:
          description: the content of the comment
          $ref: '#/components/schemas/texts'
        date:
          description: the date of the comment
          type: string
          format: date-time
          
    photo:
      description:
        the unique identificative of the photo,
        the image itself,
        user who owns the photo, likes, comments, likecount
        and the date of issue
      type: object
      properties:
        photo_id:
          description: the unique identifier of the photo
          $ref: '#/components/schemas/object_id'
        image:
          description: the image of the photo
          type: string
          format: binary
        user_id:
          description: the unique identifier of the user
          $ref: '#/components/schemas/object_id'
        likes: 
          description: List of unique identifiers of the users who liked the photo
          type: array
          items:
            $ref: '#/components/schemas/object_id'
          minItems: 0
          maxItems: 99999
          uniqueItems: true
        likecount:
          description: the number of likes of the photo
          type: integer
          default: 0
        comments:
          description: List of the comments of the photo
          type: array
          items:
            $ref: '#/components/schemas/comment'
          minItems: 0
          maxItems: 99999
          uniqueItems: true
        date:
          description: the date of the photo
          type: string
          format: date-time
      required:
        - photo_id
        - image
        - user_id
        - date

    
    error:
      description: |
        general error, the particulars are in the properties
      type: object 
      properties:
        error:
          description: the type of error
          type: string
        message:
          description: the message of the error
          type: string
